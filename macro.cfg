#####################################################################
#   Macros
#####################################################################


#####################################################################
#   Homing & QGL Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

   
#####################################################################
#   Print_Start Macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set CURR_BED_TYPE = params.CURR_BED_TYPE|lower|replace(" ", "_") %}  #|lower|replace(" ", "_") is there because otherwise Klipper wont understand the string
  {% set FILAMENT_TYPE = params.FILAMENT_TYPE %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 1min"                # Displays info
    #G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
    G4 P60000                                           # DD Waits 1 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  # Turn off BedFans because of Heat deviation
  #SET_FAN_SPEED FAN=BedFans SPEED=0
  SET_FAN_SPEED FAN=Nevermore SPEED=0

  #LOCK PROBE
  attache_probe_lock

  # QGL
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  M106 S0                         # DD Turns PT-Fan off
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  # Auto-Z-Calibration (when you want to reactivate it get the Extruder Heatup and nozzle cleaning before this point)
  #SET_DISPLAY_TEXT MSG="Auto Z"    # Displays info
  #CALIBRATE_Z

  #Bed Mesh
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  #UNLOCK PROBE
  dock_probe_unlock

  # To turn Bed Fans if needed back on
  M190 S{target_bed}

  # Turns on the nevermore
  #SET_PIN PIN=nevermore VALUE=1                      
  SET_FAN_SPEED FAN=Nevermore SPEED=1

  # We set our offset based on filament and Bed type
  CONFIGURE_BED_OFFSET CURR_BED_TYPE="{CURR_BED_TYPE}"
  CONFIGURE_FILAMENT_OFFSET FILAMENT_TYPE={FILAMENT_TYPE}       # Sets Z-Offset addition due to CONFIGURE_FILAMENT_OFFSET Macro

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  #G1 X{x_wait} Y{y_wait} Z15 F9000                             # Goes to center of the bed
  G1 X76 Y357 Z15 F9000
  #M107                                                         # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  #G1 E-2 F100
  #CLEAN_NOZZLE

  SET_DISPLAY_TEXT MSG="SHAKE THAT BOOTY"
  CLEAN_NOZZLE
  G1 E-1 F100

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  #G0 X{x_wait - 100} Y4 F10000                      # Moves to starting point
  #G0 Z0.4                                          # Raises Z to 0.4
  #G91                                              # Incremental positioning 
  #G1 X200 E30 F1000                                # Purge line
  #G90                                              # Absolut position
  SMART_PARK
  LINE_PURGE
  #Voron_Purge

#####################################################################
#   Print-End Macro
#####################################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 80, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    #SET_PIN PIN=nevermore VALUE=0.00
    SET_FAN_SPEED FAN=Nevermore SPEED=0.5
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    SET_DISPLAY_TEXT MSG="This is the End"          # Displays info
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

#####################################################################
#   Dump-Variables
#####################################################################

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

#####################################################################
#   Park Macros
#####################################################################

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT


# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT


# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR


# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER


# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

#####################################################################
#   Shutdown-Macro
#####################################################################

[gcode_macro SHUTDOWN]
gcode:
    #LCDRGB R=0 G=0 B=0                               ; Turn off LCD neopixels (see above for this macro)
    #OFF                                              ; Shortcut to turn everything off (see above for this macro)
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible host shutdown
	{action_call_remote_method("shutdown_machine")}   ; Moonraker compatible host shutdown


[menu __main __setup __shutdown]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Shut down
gcode: SHUTDOWN

#####################################################################
#   NOZZLE-CLEAN-Macro
#####################################################################

[gcode_macro CLEAN_NOZZLE_HOT]
variable_start_x: 70
variable_start_y: 357
variable_start_z: 0
variable_wipe_dist: 56
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500
 G1 E30 F10                                    ; Purge a bit

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 76
variable_start_y: 357
variable_start_z: 0
variable_wipe_dist: 50
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}

#####################################################################
#   LOAD-UNLOAD-Macro
#####################################################################

[gcode_macro LOAD_FILAMENT]
gcode:
    M83                            ; set extruder to relative
    G1 E100 F400                   ; load
    G1 E30 F150                    ; prime nozzle with filament
    M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83                            ; set extruder to relative
    G1 E15 F200                    ; extrude a little to soften tip
    G1 E-200 F1000                 ; retract some, but not too much or it will jam
    M82                            ; set extruder to absolute

#####################################################################
#   NEVERMORE-Macros
#####################################################################

[menu __main __control __nevermoreonoff]
type: command
name: Nevermore {'ON' if printer['fan_generic Nevermore'].speed > 0 else 'OFF'}
enable: {'fan_generic Nevermore' in printer}
gcode:
    TOGGLE_NEVERMORE

[menu __main __control __filterspeed]
type: input
enable: {'fan_generic Nevermore' in printer}
name: Filter %: {'%3d' % (menu.input*100)}%
input: {printer["fan_generic Nevermore"].speed}
input_min: 0
input_max: 1
input_step: 0.1
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED={menu.input}

[delayed_gcode filter_off]
gcode:
    SET_FAN_SPEED FAN=Nevermore SPEED=0

[gcode_macro TOGGLE_NEVERMORE]
gcode:
    {% if printer['fan_generic Nevermore'].speed > 0 %}
      SET_FAN_SPEED FAN=Nevermore SPEED=0
    {% else %}
      SET_FAN_SPEED FAN=Nevermore SPEED=1
    {% endif %}

#####################################################################
#   Bed-Type-Macros
#####################################################################

### DD If you want to add different plates remeber to lower the cases and dont use space. Instead use _

[gcode_macro CONFIGURE_BED_OFFSET]
gcode:
    {% set CURR_BED_TYPE = params.CURR_BED_TYPE %}

    {% if CURR_BED_TYPE == 'high_temp_plate' %}
        SET_GCODE_OFFSET Z=0.0
        #SET_GCODE_OFFSET Z_ADJUST=0.000
    {% elif CURR_BED_TYPE == 'textured_pei_plate' %}
        SET_GCODE_OFFSET Z=-0.050
        #SET_GCODE_OFFSET Z_ADJUST=-0.050
    {% elif CURR_BED_TYPE == 'engineering_plate' %}
        SET_GCODE_OFFSET Z=0.0
        #SET_GCODE_OFFSET Z_ADJUST=0.000
    {% else %}
        SET_GCODE_OFFSET Z=0.0
        #SET_GCODE_OFFSET Z_ADJUST=0.000
    {% endif %}

#####################################################################
#   Filament-Type-Macros
#####################################################################

[gcode_macro CONFIGURE_FILAMENT_OFFSET]
gcode:
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE %}

    {% if FILAMENT_TYPE == 'PLA' %}  
        SET_GCODE_OFFSET Z_ADJUST=0.000
    {% elif FILAMENT_TYPE in ['PET','PETG','PCTG'] %}   
        # PETG Zoffset   
        SET_GCODE_OFFSET Z_ADJUST=0
    {% elif FILAMENT_TYPE in 'ASA' %}
        # ASA Zoffset
        SET_GCODE_OFFSET Z_ADJUST=-0.130
    {% elif FILAMENT_TYPE in 'ABS' %}
        # ABS Zoffset
        SET_GCODE_OFFSET Z_ADJUST=-0.140
    {% else %}   
        # Other kind of filament we reset to 0
        SET_GCODE_OFFSET Z_ADJUST=0.000
    {% endif %}
